import Link from "next/link";
import "./globals.css";
import { Metadata } from "next";

//% 클라이언트 컴포넌트를 사용할 떄 단점
//% - 서버가 먼 곳에 있을 때 데이터를 가져오기 힘들다.
//% - 자바스크립트가 동작하지 않을때 서버와 통신하는 유즈 이펙트를 비롯한 모든 코드들이 실행되지 않기 때문에
//% 	컨텐츠가 화면에 표시되지 않음
//% - 데이터베이스에 접속을 하면 데이터베이스 아이디와 패스워드가 노출될 수 있어 보안에도 좋지 않음

//^ 서버 컴포넌트
//^ 서버 쪽에서 패치 메소드 실행 실행이 끝날때까지 기다림 그 후 json()으로 변환되어 `topics`에 저장
//^ 그 후 글 목록을 동적으로 생성하고 그렇게 만들어진 결과를 서버 쪽에 저장 해놓고 정적인 코드만 클라이언트 전송하고 자바스크립트 코드는 제외
//^ 장점
//^ - 용량이 적음 클라이언트에 자바스크립트 전송 안해서
//^ - 우리가 접근하고 있는 이 서버가 같은 서버에 있는 주소라고 하면 아주 빠르게 동작이 수행됨
//^ - 서버쪽에서 렌더링을 끝내고 클라이언트에 표시하기 때문에 모든 화면이 표시 (서버쪽에서 동적으로 생성한 정적인 내용을 클라이언트로 전달 했으니까)

//! metadata는 서버 컴포넌트에서만 작동 클라이언트 서버에서 사용하면 에러
export const metadata: Metadata = {
  title: "Web Tutorials",
  description: "Generated by pearlkinn",
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const resp = await fetch("http://localhost:9999/topics");
  const topics = await resp.json();

  return (
    <html>
      <body>
        <h1>
          <Link href="/">WEB</Link>
        </h1>
        <ol>
          {topics.map((topic) => {
            return (
              <li key={topic.id}>
                <Link href={`/read/${topic.id}`}>{topic.title}</Link>
              </li>
            );
          })}
        </ol>
        {children}
        <ul>
          <li>
            <Link href="/create">Create</Link>
          </li>
          <li>
            <Link href="/update/1">Update</Link>
          </li>
          <li>
            <input type="button" value="delete" />
          </li>
        </ul>
      </body>
    </html>
  );
}
